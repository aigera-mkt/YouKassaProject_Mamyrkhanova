{"uid":"cd88dc893baf67b5","name":"test_input_order","fullName":"pythonProject.bbe.tests.test_add_to_cart.TestNewOrder#test_input_order","historyId":"d807ea15a45d9c522cef5fb239da7542","time":{"start":1728988121172,"stop":1728988171444,"duration":50272},"status":"failed","statusMessage":"AssertionError: The URL didn't contains 'payments'\nassert 'payments' in 'https://demo.yookassa.ru/new_order'","statusTrace":"self = <bbe.tests.test_add_to_cart.TestNewOrder object at 0x000001743A32D790>, base_url = 'https://demo.yookassa.ru/'\n\n    def test_input_order(self, base_url):\n    # Инициализация страницы корзины и заказа\n        cart_page = CartPage(self.driver)\n        order_page = OrderPage(self.driver)\n        order_status_page = OrderStatusPage(self.driver)\n        cart_page.open_cart_page()\n    \n        # Добавляем товар в корзину\n        product_id = '253355137'\n        cart_page.add_item_cart_page(product_id)\n    \n        # Нажимаем кнопку \"Оформить заказ\"\n        cart_page.order_button_click()\n    \n        assert \"new_order\" in self.driver.current_url, \"The order page did not open.\"\n    \n        # Открытие страницы заказа\n        order_page.open_order_page()\n    \n        # Заполнить форму контактного телефона\n        order_page.input_contact_number()\n    \n        #Проверка правильности заполнения поля контактного телефона\n        assert order_page.get_contact_number() == \"+7(926)555-11-22\", \"Contact number was not correctly filled.\"\n    \n        # Негативный сценарий, неверное заполнение населенного пункта\n        order_page.input_wrong_location()\n        # Подтвердить заказ\n        order_page.submit_button_click()\n        time.sleep(3)\n        # Проверка наличия ошибки - алерт с текстом\n        assert order_page.error_alert(), \"Alert of location error is not displayed\"\n        time.sleep(3)\n    \n        # Заполнить форму контактного телефона\n        order_page.input_contact_number()\n        #Очищаем поле населенного пункта\n        order_page.input_location_clear()\n        # Заполняем форму населенного пункта\n        order_page.input_location_value()\n        # Доставка курьером\n        order_page.delivery_by_curier()\n        time.sleep(3)\n        # Проверка, что доставка курьером выбрана\n        assert order_page.is_delivery_by_curier_selected(), \"Courier delivery was not selected.\"\n    \n        # ФИО\n        order_page.full_name()\n    \n        #Подтвердить заказ\n        order_page.submit_button_click()\n        time.sleep(10)\n        order_status_page.check_order_status()\n    \n         # Сохраняем текущий url\n        current_url = self.driver.current_url\n        # Проверка перехода на новый url с платежом\n        expected_url_part = \"payments\"\n    \n        # Проверка перехода на новый URL\n>       assert expected_url_part in current_url, \"The URL didn't contains 'payments'\"\nE       AssertionError: The URL didn't contains 'payments'\nE       assert 'payments' in 'https://demo.yookassa.ru/new_order'\n\npythonProject\\bbe\\tests\\test_add_to_cart.py:135: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1728988119653,"stop":1728988121169,"duration":1516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1728988121169,"stop":1728988121169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: The URL didn't contains 'payments'\nassert 'payments' in 'https://demo.yookassa.ru/new_order'","statusTrace":"self = <bbe.tests.test_add_to_cart.TestNewOrder object at 0x000001743A32D790>, base_url = 'https://demo.yookassa.ru/'\n\n    def test_input_order(self, base_url):\n    # Инициализация страницы корзины и заказа\n        cart_page = CartPage(self.driver)\n        order_page = OrderPage(self.driver)\n        order_status_page = OrderStatusPage(self.driver)\n        cart_page.open_cart_page()\n    \n        # Добавляем товар в корзину\n        product_id = '253355137'\n        cart_page.add_item_cart_page(product_id)\n    \n        # Нажимаем кнопку \"Оформить заказ\"\n        cart_page.order_button_click()\n    \n        assert \"new_order\" in self.driver.current_url, \"The order page did not open.\"\n    \n        # Открытие страницы заказа\n        order_page.open_order_page()\n    \n        # Заполнить форму контактного телефона\n        order_page.input_contact_number()\n    \n        #Проверка правильности заполнения поля контактного телефона\n        assert order_page.get_contact_number() == \"+7(926)555-11-22\", \"Contact number was not correctly filled.\"\n    \n        # Негативный сценарий, неверное заполнение населенного пункта\n        order_page.input_wrong_location()\n        # Подтвердить заказ\n        order_page.submit_button_click()\n        time.sleep(3)\n        # Проверка наличия ошибки - алерт с текстом\n        assert order_page.error_alert(), \"Alert of location error is not displayed\"\n        time.sleep(3)\n    \n        # Заполнить форму контактного телефона\n        order_page.input_contact_number()\n        #Очищаем поле населенного пункта\n        order_page.input_location_clear()\n        # Заполняем форму населенного пункта\n        order_page.input_location_value()\n        # Доставка курьером\n        order_page.delivery_by_curier()\n        time.sleep(3)\n        # Проверка, что доставка курьером выбрана\n        assert order_page.is_delivery_by_curier_selected(), \"Courier delivery was not selected.\"\n    \n        # ФИО\n        order_page.full_name()\n    \n        #Подтвердить заказ\n        order_page.submit_button_click()\n        time.sleep(10)\n        order_status_page.check_order_status()\n    \n         # Сохраняем текущий url\n        current_url = self.driver.current_url\n        # Проверка перехода на новый url с платежом\n        expected_url_part = \"payments\"\n    \n        # Проверка перехода на новый URL\n>       assert expected_url_part in current_url, \"The URL didn't contains 'payments'\"\nE       AssertionError: The URL didn't contains 'payments'\nE       assert 'payments' in 'https://demo.yookassa.ru/new_order'\n\npythonProject\\bbe\\tests\\test_add_to_cart.py:135: AssertionError","steps":[],"attachments":[{"uid":"aa075f441294fc33","name":"stdout","source":"aa075f441294fc33.txt","type":"text/plain","size":928}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"init_driver::0","time":{"start":1728988171547,"stop":1728988173769,"duration":2222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver', 'base_url')"},{"name":"parentSuite","value":"pythonProject.bbe.tests"},{"name":"suite","value":"test_add_to_cart"},{"name":"subSuite","value":"TestNewOrder"},{"name":"host","value":"sb-a309063"},{"name":"thread","value":"20912-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"pythonProject.bbe.tests.test_add_to_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('init_driver', 'base_url')"]},"source":"cd88dc893baf67b5.json","parameterValues":[]}