{"uid":"3d465f47db7a6c76","name":"test_input_order","fullName":"pythonProject.bbe.tests.test_add_to_cart.TestNewOrder#test_input_order","historyId":"d807ea15a45d9c522cef5fb239da7542","time":{"start":1728983541247,"stop":1728983582105,"duration":40858},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <bbe.tests.test_add_to_cart.TestNewOrder object at 0x000002A7D517D9D0>, base_url = 'https://demo.yookassa.ru/'\n\n    def test_input_order(self, base_url):\n    # Инициализация страницы корзины и заказа\n        cart_page = CartPage(self.driver)\n        order_page = OrderPage(self.driver)\n        order_status_page = OrderStatusPage(self.driver)\n        cart_page.open_cart_page()\n    \n        # Добавляем товар в корзину\n        product_id = '253355137'\n        cart_page.add_item_cart_page(product_id)\n    \n        # Нажимаем кнопку \"Оформить заказ\"\n        cart_page.order_button_click()\n    \n        assert \"new_order\" in self.driver.current_url, \"The order page did not open.\"\n    \n        # Открытие страницы заказа\n        order_page.open_order_page()\n    \n        # Заполнить форму контактного телефона\n        order_page.input_contact_number()\n    \n        #Проверка правильности заполнения поля контактного телефона\n        assert order_page.get_contact_number() == \"+7(926)555-11-22\", \"Contact number was not correctly filled.\"\n    \n        # Негативный сценарий, неверное заполнение населенного пункта\n        order_page.input_wrong_location()\n        # Подтвердить заказ\n        order_page.submit_button_click()\n        time.sleep(3)\n        # Проверка наличия ошибки - алерт с текстом\n        assert order_page.error_alert(), \"Alert of location error is not displayed\"\n        time.sleep(3)\n        #Очищаем поле населенного пункта\n        order_page.input_location_clear()\n        # Заполняем форму населенного пункта\n        order_page.input_location_value()\n        # Доставка курьером\n        order_page.delivery_by_curier()\n        time.sleep(3)\n        # Проверка, что доставка курьером выбрана\n        assert order_page.is_delivery_by_curier_selected(), \"Courier delivery was not selected.\"\n    \n        # ФИО\n        order_page.full_name()\n        #Подтвердить заказ\n        order_page.submit_button_click()\n    \n        order_status_page.check_order_status()\n    \n    \n        # Проверка перехода на новый url с платежом\n>       WebDriverWait(self.driver, 10).until(\n        EC.url_contains(\"payments\")\n        )\n\npythonProject\\bbe\\tests\\test_add_to_cart.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"03eeb99c46ec2235dc90dc4a3c488ec3\")>\nmethod = <function url_contains.<locals>._predicate at 0x000002A7D3476340>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\npythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1728983539735,"stop":1728983541244,"duration":1509},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1728983541245,"stop":1728983541245,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <bbe.tests.test_add_to_cart.TestNewOrder object at 0x000002A7D517D9D0>, base_url = 'https://demo.yookassa.ru/'\n\n    def test_input_order(self, base_url):\n    # Инициализация страницы корзины и заказа\n        cart_page = CartPage(self.driver)\n        order_page = OrderPage(self.driver)\n        order_status_page = OrderStatusPage(self.driver)\n        cart_page.open_cart_page()\n    \n        # Добавляем товар в корзину\n        product_id = '253355137'\n        cart_page.add_item_cart_page(product_id)\n    \n        # Нажимаем кнопку \"Оформить заказ\"\n        cart_page.order_button_click()\n    \n        assert \"new_order\" in self.driver.current_url, \"The order page did not open.\"\n    \n        # Открытие страницы заказа\n        order_page.open_order_page()\n    \n        # Заполнить форму контактного телефона\n        order_page.input_contact_number()\n    \n        #Проверка правильности заполнения поля контактного телефона\n        assert order_page.get_contact_number() == \"+7(926)555-11-22\", \"Contact number was not correctly filled.\"\n    \n        # Негативный сценарий, неверное заполнение населенного пункта\n        order_page.input_wrong_location()\n        # Подтвердить заказ\n        order_page.submit_button_click()\n        time.sleep(3)\n        # Проверка наличия ошибки - алерт с текстом\n        assert order_page.error_alert(), \"Alert of location error is not displayed\"\n        time.sleep(3)\n        #Очищаем поле населенного пункта\n        order_page.input_location_clear()\n        # Заполняем форму населенного пункта\n        order_page.input_location_value()\n        # Доставка курьером\n        order_page.delivery_by_curier()\n        time.sleep(3)\n        # Проверка, что доставка курьером выбрана\n        assert order_page.is_delivery_by_curier_selected(), \"Courier delivery was not selected.\"\n    \n        # ФИО\n        order_page.full_name()\n        #Подтвердить заказ\n        order_page.submit_button_click()\n    \n        order_status_page.check_order_status()\n    \n    \n        # Проверка перехода на новый url с платежом\n>       WebDriverWait(self.driver, 10).until(\n        EC.url_contains(\"payments\")\n        )\n\npythonProject\\bbe\\tests\\test_add_to_cart.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"03eeb99c46ec2235dc90dc4a3c488ec3\")>\nmethod = <function url_contains.<locals>._predicate at 0x000002A7D3476340>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\npythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","steps":[],"attachments":[{"uid":"8a12e7702c92993e","name":"stdout","source":"8a12e7702c92993e.txt","type":"text/plain","size":928}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"init_driver::0","time":{"start":1728983582209,"stop":1728983584397,"duration":2188},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver', 'base_url')"},{"name":"parentSuite","value":"pythonProject.bbe.tests"},{"name":"suite","value":"test_add_to_cart"},{"name":"subSuite","value":"TestNewOrder"},{"name":"host","value":"sb-a309063"},{"name":"thread","value":"24808-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"pythonProject.bbe.tests.test_add_to_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('init_driver', 'base_url')"]},"source":"3d465f47db7a6c76.json","parameterValues":[]}